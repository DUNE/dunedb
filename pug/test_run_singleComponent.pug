extend default

block vars
  - var page_title = "Run Test (Single Component): " + formId;

block extrascripts
  script(type = 'text/javascript').
    
    // I could do this by API query of the server, but this works for now
    var formrec = !{JSON.stringify(form || {}, null , 4)}; 
    var testdata = !{JSON.stringify((testdata || {}), null , 4)}; 
    var readOnly = !{retrieved || false};
    var route_on_submit = "!{route_on_submit || '/test'}";
    var submission_url = "!{submission_url || '/json/test'}"
    var componentUuid = !{JSON.stringify(componentUuid || null)};

  script(type = 'text/javascript').

    var form = null;
    var lastDraftSave = new Date();

    function LoadLastTest()
    {
      if(componentUuid)
      {
        // Retrieve the most recent test of this type for this component
        $.ajax({method: "get",
                url: '/json/tests/' + componentUuid,
                dataType: 'json' })
         .then(function(data)
         {
           var best = null;
           
           for(var oldtest of data)
           {
             if(oldtest.formId == formrec.formId)
             {
               if(!best)
               {
                 best = oldtest;
               }
               else
               {
                 if(moment(oldtest.insertion.insertDate).isAfter(moment(best.insertion.insertDate)))
                 {
                   best = form;
                 }
               }
             }
           }
           
           // Once the best test form has been retrieved ...
           if(best)
           {
             console.log("figured out best", best);
             
             $.ajax({method: "GET",
                     url: '/json/test/' + best._id,
                     dataType: 'json'})
              .then(function(record)
              {
                console.log("old record", record);
                console.log("cur record", form.submission);
                
                if(record.data)
                {
                  var new_data = {...record.data, ...form.submission.data};
                  form.submission = {data: new_data};
                }
              })
            }
         });
      }
    }
    
    function SaveDraft()
    {
      // Get the time since the last draft save
      var seconds = Math.floor((new Date() - lastDraftSave) / 1000);
      
      if(seconds > 10)
      {
        var submission = form.submission;
        submission.state = "draft";
        SubmitData(submission);
      }
    }

    function SubmitData(submission)
    {
      try
      {
        var draft = submission.state !== "submitted";
      
        // Include relevant information about the form, for later retrieval
        // These MUST be in the submission information
        submission.formId = formrec.formId;
        submission.formName = formrec.formName;
        submission.formObjectId = formrec._id;
        submission.componentUuid = componentUuid;

        if(!draft)
        {
          console.log("SubmitData", ...arguments);
        }
        else
        {
          console.log("SubmitData AS DRAFT", ...arguments);
        }

        function postSuccess(retval)
        {
          console.log('postSuccess', retval);
          
          if((retval.error))
          {
            form.setAlert("warning", nretval.error);
            form.emit('submitError');
          }

          if(!draft)
          { 
            form.emit('submitDone');
            
            // Go to the completed results form, and do not leave this page in the browser history
            window.location.replace(route_on_submit + '/' + retval);
          }
          else
          {
            // Update the draft ID
            form.submission._id = retval;
            lastDraftSave = new Date();

            // Formio doesn't actually have a way of doing this ...
            var saveButtons = FormioUtils.searchComponents(form.components, {type: 'button',
                                                                             "component.action": 'saveState'});
            
            for(button of saveButtons)
            {
              button.loading = false;
              button.disabled = false;
              $(button.refs.buttonMessage).text("Draft Saved").show().delay(2000).fadeOut(500);
            }

            // Re-enable any submit buttons that might have been removed by other uses of the results form
            saveButtons = FormioUtils.searchComponents(form.components, {type: 'button',
                                                                         "component.action": 'submit'});
                                                                         
            for(button of saveButtons)
            {
              button.disabled = false;
            }
          }
        }
        
        function postFail(res, statusCode, statusMsg)
        {
          // If the submission failed, set up and relay error messages
          if(res.responseText && res.responseText.length > 0)
          {
            form.setAlert("danger", res.responseText);
          }
          else
          {
            form.setAlert("danger", statusMsg + " (" + statusCode + ")");
          }
          
          form.emit('submitError');
          console.log("Posting fail", res, statusCode, statusMsg);
        }; 

        console.log("Submitting data", submission, JSON.stringify(submission));
        
        $.ajax({contentType: "application/json",
                method: "post",
                url: submission_url,
                data: JSON.stringify(submission),
                dataType: "json",
                success: postSuccess})
         .fail(postFail);
      }
      catch (e)
      {
        console.error(e);
        debugger;
      }
    };

    // General Setup function
    window.onload = async function()
    {
      console.log("schema", formrec.schema);

      // Add buttons for saving results as draft and submitting results to the results schema
      var append_to = formrec.schema;
      
      if(formrec.schema.display === 'wizard')
      {
        append_to = formrec.schema.components[formrec.schema.components.length - 1];
      }

      if(!readOnly)
      {
        append_to.components.push({type: 'button',
                                   action: "saveState",
                                   state: 'draft',
                                   theme: 'secondary',
                                   key: 'saveAsDraft',
                                   label: 'Save Results as Draft'});
        
        append_to.components.push({type: "button",
                                   label: "Submit Results",
                                   key: "submit",
                                   disableOnInvalid: true,
                                   input: true,
                                   tableView: false});
      }

      // Remove the 'submit' button if the results page is in read-only status
      form = await Formio.createForm(document.getElementById('builtform'), formrec.schema, {readOnly: readOnly,
                                                                                            buttonSettings: {showCancel: false,
                                                                                                             showSubmit: false}});
      
      console.log(form);
      form.submission = Object.assign(form.submission, testdata);
      
      if(window.location.hash)
      {
        // Okay, we got this with a hash, so now see if we can interpret it
        var hash = window.location.hash.substring(1);
        var frags = hash.split("&");
        
        for(frag of frags)
        {
          var a = frag.split(/([^=]+)=(.+)/);
          
          if(a[1] && a[2])
          {
            // Attempt to prefill the results form
            var key = decodeURIComponent(a[1]);
            var value = decodeURIComponent(a[2]);
            
            // Parse the key as a jsonpath
            // Note that we can do this only after the data object is initialized by the form
            jsonpath.value(form.submission, key, value);
            
            // Goose the 'set' function into changing the displayed data
            form.submission = form.submission;
          }
        }
      }

      if(!readOnly)
      {
        form.on('submit', SubmitData);
        form.on('change', SaveDraft);
      }

      $('#loadRecentTestData').on('click', LoadLastTest);
    }

block content
  .container-fluid
    pre #{''}
    pre #{''}
    
    h3="Run Test (Single Component): " + form.formName
    
    dl
      dt Component UUID
      dd
        a(href = '/component/' + componentUuid)=componentUuid
    
    pre #{''}
    
    button.btn.btn-info#loadRecentTestData Load Most Recent Test Data
    
    pre #{''}
    
    hr
    
    #builtform

