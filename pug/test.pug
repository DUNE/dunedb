extend default


block vars
  - var page_title=formId;
  - console.log('data in pug:',data)
block extrascripts
  script(type='text/javascript').
    // I could do this by API query of the server, but this works for now.
    var formrec=!{ JSON.stringify(form||{}, null ,4) }; 
    var testdata=!{JSON.stringify((testdata||{}), null ,4)}; 
    var readOnly=!{retrieved||false};
    var route_on_submit = "!{route_on_submit || '/test'}";
    var submission_url = "!{submission_url || '/json/test'}"
    var componentUuid = !{JSON.stringify(componentUuid||null)};

  script(type='text/javascript').

    var form = null;
    var lastDraftSave = new Date();

    function MaybeSaveDraft() {
      // time since last draft save
      var seconds = Math.floor((new Date() - lastDraftSave) / 1000);
      if(seconds>10) {
        var submission = form.submission;
        submission.state = "draft";
        SubmitData(submission);
      }
    }

    function SubmitData(submission) {
      // actually the 'submit' function
      var draft = submission.state !== "submitted";
      
      // Include relevant information about the form, for later retrieval
      submission.formId = formrec.formId; // MUST be in submission.
      submission.formName = formrec.formName; // MUST be in submission.
      submission.formObjectId = ObjectID(formrec._id); // MUST be in submission.
      submission.componentUuid = componentUuid; // MUST be in submission.

      if(!draft) {
            console.log("SubmitData",...arguments);
      } else {
            console.log("SubmitData AS DRAFT",...arguments);
      }

      function postSuccess(retval) {
          console.log('postSuccess',retval);
          if((retval.error)) {
            form.setAlert("warning",retval.error);
            form.emit('submitError');
          }

          if(!draft) { 
            form.emit('submitDone');
            // go to completed form. Do not leave this page in browser history. 
            window.location.replace(route_on_submit+'/'+retval._id);
          } else {
            // Update the draftid.
            form.submission._id = retval._id;
            lastDraftSave = new Date();

            // Formio doesn't actually have a way of doing this...
            var saveButtons = FormioUtils.searchComponents(form.components,{type:'button',"component.action":'saveState'});
            for(button of saveButtons) {
                  button.loading = false;
                  button.disabled = false;
                  $(button.refs.buttonMessage).text("Draft saved").show().delay(2000).fadeOut(500);
            }

            // also re-enable all submit buttons.
            saveButtons = FormioUtils.searchComponents(form.components,{type:'button',"component.action":'submit'});
            for(button of saveButtons) {
              button.disabled = false;
            }
          }
      }
      function postFail(res,statusCode,statusMsg){
          // On failure, add a failure message
          if(res.responseText && res.responseText.length>0) form.setAlert("danger",res.responseText);
          else                                              form.setAlert("danger",statusMsg + " ("+statusCode+")");
          //- alert("posting failed");
          form.emit('submitError');
          console.log("posting fail",res,statusCode,statusMsg);

      }; 

      console.log("submitting data",submission, JSON.stringify(submission));
      $.ajax(
        { contentType: "application/json",
          method: "post",
          url: submission_url,
          data: JSON.stringify(submission),
          dataType: "json",
          success: postSuccess
        }
        ).fail(postFail);

    };


    // ----------- Setup
    window.onload = async function() {


      console.log("schema",formrec.schema);

      // Add draft and submit buttons.
      var append_to = formrec.schema;
      if(formrec.schema.display === 'wizard') append_to = formrec.schema.components[formrec.schema.components.length-1]; // last page.

      // Add save-as-draft button.
      if(!readOnly) {
        append_to.components.push({type:'button', action:"saveState", state: 'draft', theme: 'secondary', key:'saveAsDraft', label:'Save Draft'});
        
        // add submit button
        append_to.components.push({ type: "button",label: "Submit",key: "submit",disableOnInvalid: true,input: true,tableView: false
        });
      }

      // Remove submit button if it's read-only

      form = await Formio.createForm(
                  document.getElementById('builtform'),
                  formrec.schema,
                  { readOnly: readOnly,
                    buttonSettings: {showCancel: false, showSubmit: false}
                    //- saveDraft: true,
                    //- saveDraftThrottle: 1000
                  });
                  //- });
      //- form.url="https://nowhere.com";
      console.log(form);
      form.submission = Object.assign(form.submission, testdata);

      if(!readOnly) {
        form.on('submit',SubmitData);
        form.on('change',MaybeSaveDraft);
      }
    }

block content
  h2=form.formName
  
  #builtform

