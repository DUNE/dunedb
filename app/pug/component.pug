extend default
include common.pug

block vars
  - const page_title = 'View Component Information';

block extrascripts
  script(type = 'text/javascript').
    const component = !{JSON.stringify(component, null, 4)};
    const componentVersions = !{JSON.stringify(componentVersions, null, 4)};
    const componentTypeForm = !{JSON.stringify(componentTypeForm, null, 4)};
    const collectionDetails = !{JSON.stringify(collectionDetails, null, 4)};
    const actions = !{JSON.stringify(actions, null, 4)};
    const actionTypeForms = !{JSON.stringify(actionTypeForms, null, 4)};
    const base_url = '!{base_url}';
    const queryDictionary = !{JSON.stringify(queryDictionary, null, 4)};

  block workscripts
    script(src = '/pages/component.js')

block content
  .container-fluid
    .vert-space-x2
      h2 View Component Information

    .vert-space-x1
      .row
        .col-md-9
          dl
            dt Component Type
            dd
              .form-inline
                a #{component.formName}

                .hori-space-x1
                  a.btn-sm.btn-primary(href = `/component/${component.formId}`)
                    img.small-icon(src = '/images/run_icon.svg')
                    | &nbsp; Create New Component of This Type

            dt Component UUID
            dd
              .form-inline
                a(href = `/component/${component.componentUuid}`) #{component.componentUuid}

                .hori-space-x1
                  a.copybutton.btn-sm#copy_uuid(onclick = 'CopyUUID(component.componentUuid)') Copy

            dt Component Name

            if component.data.name
              dd #{component.data.name}
            else
              dd (none)

            if component.formId == 'GroundingMeshPanel'
              dt Factory ID
              dd #{component.data.typeRecordNumber}

            if component.workflowId
              dt Part of Workflow:
              dd
                a(href = `/workflow/${component.workflowId}`, target = '_blank') #{component.workflowId}

            if component.data.fromBatch
              dt Part of Batch:
              dd
                a(href = `/component/${component.data.fromBatch}`, target = '_blank') #{component.data.fromBatch}

            dt Component Data:
            dd This is version #{component.validity.version} of the component, and it was last edited on !{' '}
              +dateFormat(component.insertion.insertDate)

              if component.insertion.user
                |  by !{' '}
                a(href = `mailto:${user_email(component.insertion.user)}`) #{component.insertion.user.displayName}

            if component.formId === 'BoardShipment'
              .vert-space-x1.border-success.border.rounded.p-2
                dt Origin Location 
                dd #{component.data.originOfShipment.toUpperCase()}

                dt Destination Location
                dd #{component.data.destinationOfShipment.toUpperCase()}

                dt Boards in Shipment
                dd
                  table.table
                    thead
                      tr
                        th.col-md-3 UUID
                        th.col-md-1 UK ID
                        th.col-md-3 QR Code Link 

                    tbody
                      each info in collectionDetails
                        tr
                          td
                            a(href = `/component/${info[0]}`, target = '_blank') #{info[0]}

                          td #{info[1]}
                          td #{`${base_url}/c/${info[2]}`}

                a.btn.btn-secondary(href = `/component/${component.componentUuid}/batchQRCodes`, target = '_blank')
                  img.small-icon(src = '/images/checklist_icon.svg')
                  | &nbsp; Print all sub-component QR codes
            else if component.formId === 'GroundingMeshShipment'
              .vert-space-x1.border-success.border.rounded.p-2
                dt Origin Location
                dd #{component.data.originOfShipment.toUpperCase()}

                dt Destination Location
                dd #{component.data.destinationOfShipment.toUpperCase()}

                dt Meshes in Shipment
                dd
                  table.table 
                    thead 
                      tr 
                        th.col-md-2 UUID 
                        th.col-md-2 DUNE PID
                        th.col-md-3 QR Code Link 

                    tbody 
                      each info in collectionDetails
                        tr
                          td
                            a(href = `/component/${info[0]}`, target = '_blank') #{info[0]}

                          td #{info[1]}
                          td #{`${base_url}/c/${info[2]}`}

                a.btn.btn-secondary(href = `/component/${component.componentUuid}/batchQRCodes`, target = '_blank')
                  img.small-icon(src = '/images/checklist_icon.svg')
                  | &nbsp; Print all sub-component QR codes
            else if component.formId === 'PopulatedBoardShipment'
              .vert-space-x1.border-success.border.rounded.p-2
                dt Origin Location
                dd #{component.data.originOfShipment.toUpperCase()}

                dt Destination Location
                dd #{component.data.destinationOfShipment.toUpperCase()}

                dt Components in Kit
                dd
                  table.table 
                    thead 
                      tr 
                        th.col-md-2 UUID 
                        th.col-md-1 Type
                        th.col-md-1 UW ID 
                        th.col-md-3 QR Code Link 

                    tbody 
                      each info in collectionDetails
                        tr
                          td
                            a(href = `/component/${info[0]}`, target = '_blank') #{info[0]}

                          td #{info[3]}
                          td #{info[1]}
                          td #{`${base_url}/c/${info[2]}`}

                a.btn.btn-secondary(href = `/component/${component.componentUuid}/batchQRCodes`, target = '_blank')
                  img.small-icon(src = '/images/checklist_icon.svg')
                  | &nbsp; Print all sub-component QR codes
            else if component.formId === 'CEAdapterBoardBatch' || component.formId === 'CRBoardBatch' || component.formId === 'GBiasBoardBatch' || component.formId === 'GeometryBoardBatch'
              if component.formId === 'GeometryBoardBatch'
                .vert-space-x1.border-success.border.rounded.p-2
                  #typeform

              - let columnHeader = ''

              if component.data.subComponent_formId == 'CEAdapterBoard' || component.data.subComponent_formId == 'CRBoard' || component.data.subComponent_formId == 'GBiasBoard'
                - columnHeader = 'UW ID'
              else 
                - columnHeader = 'UK ID'

              .vert-space-x1.border-success.border.rounded.p-2
                dt #{`Components in Batch (total = ${component.data.subComponent_count})`}
                dd
                  table.table
                    thead
                      tr
                        th.col-md-3 UUID
                        th.col-md-1 #{columnHeader}
                        th.col-md-3 QR Code Link

                    tbody
                      each uuid, index in component.data.subComponent_fullUuids
                        tr
                          td
                            a(href = `/component/${uuid}`, target = '_blank') #{uuid}

                          if component.data.subComponent_typeRecordNumbers
                            td #{component.data.subComponent_typeRecordNumbers[index]}
                          else
                            td (not retrievable)

                          td #{`${base_url}/c/${component.data.subComponent_shortUuids[index]}`}

                .form-inline
                  a.btn.btn-secondary(href = `/component/${component.componentUuid}/batchQRCodes`, target = '_blank')
                    img.small-icon(src = '/images/checklist_icon.svg')
                    | &nbsp; Print all sub-component QR codes

                  .hori-space-x2 
                    a.btn.btn-secondary#download_links(onclick = 'DownloadLinks(component.data.subComponent_shortUuids)', download = `links_${component.data.orderNumber}.txt`, href = '') Download List of Links

            else
              .vert-space-x1.border-success.border.rounded.p-2
                #typeform

          .vert-space-x1
            .panel.panel-default
            .foldable-heading.panel-heading.collapsed(data-toggle = 'collapse' data-target = '#versionsBox')
              | All Versions: 
              i.chevron.fa.fa-fw 

            .collapse#versionsBox
              ul
                each v in componentVersions
                  li 
                    a(href = `?version=${v.validity.version}`) Version #{v.validity.version}
                    |  on 
                    +dateFormat(v.insertion.insertDate)

                    if v.insertion.user
                      |  by !{' '}
                      a(href = `mailto:${user_email(v.insertion.user)}`) #{v.insertion.user.displayName}

        .col-md-3
          #qr-code
            +qr-panel-noText(`${base_url}/c/${component.shortUuid.toString()}`, component.data.name)

    .vert-space-x2.form-inline
      a.btn.btn-warning(href = `/component/${component.componentUuid}/edit`)
        img.small-icon(src = '/images/edit_icon.svg')
        | &nbsp; Edit Component

      - let jsonURLString = `/json/component/${component.componentUuid}`;
      - if ('version' in queryDictionary) jsonURLString += `?version=${queryDictionary.version}`;

      .hori-space-x2
        a.btn.btn-secondary(href = `${jsonURLString}`, target = '_blank')
          img.small-icon(src = '/images/checklist_icon.svg')
          | &nbsp; View JSON Record

      .hori-space-x2
        a.btn.btn-primary(href = `/component/${component.componentUuid}/qrCodes`)
          img.small-icon(src = '/images/checklist_icon.svg')
          | &nbsp; Print a set of the component's QR codes

      .hori-space-x2
        a.btn.btn-primary(href = `/component/${component.componentUuid}/summary`)
          img.small-icon(src = '/images/checklist_icon.svg')
          | &nbsp; View and print the component's summary

      if component.formId == 'AssembledAPA'
        .hori-space-x2
          a.btn.btn-primary(href = `/component/${component.componentUuid}/execSummary`)
            img.small-icon(src = '/images/checklist_icon.svg')
            | &nbsp; View and print this APA's executive summary

    .vert-space-x2
      hr

    .vert-space-x1
      .row
        .col-sm-6
          h4 Action History

          hr

          if !actions || actions.length == 0
            p None
          else
            table.table
              thead
                tr
                  th.col-md-2 Action Type Name
                  th.col-md-2 Action ID
                  th.col-md-2 Last Performed On:

              tbody
                each action in actions
                  tr
                    td #{action.typeFormName}

                    td
                      a(href = `/action/${action.actionId}`) #{action.actionId}

                    td
                      +dateFormat(action.lastEditDate)

        .col-sm-6
          h4 Select an Action Type to Perform

          hr

          each typeForm in actionTypeForms
            if typeForm.componentTypes.includes(component.formName) && !typeForm.tags.includes('Trash')
              a.actionbutton.btn.btn-success(href = `/action/${typeForm.formId}/${component.componentUuid}`) #{typeForm.formName}

    .vert-space-x2
